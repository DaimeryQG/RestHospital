package com.imss.qro.controller;

import com.imss.qro.models.Insumos;
import com.imss.qro.service.InsumoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/insumos")
public class InsumoController {

	@Autowired
    private final InsumoService insumoService;

    public InsumoController(InsumoService insumoService) {
        this.insumoService = insumoService;
    }

    // Endpoint para obtener todos los insumos
    @GetMapping
    public List<Insumos> obtenerTodosLosInsumos() {
        return insumoService.obtenerTodosLosInsumos();
    }

    // Endpoint para obtener un insumo por ID
    @GetMapping("/{id}")
    public ResponseEntity<Insumos> obtenerInsumoPorId(@PathVariable Integer id) {
        Optional<Insumos> insumo = insumoService.obtenerInsumoPorId(id);
        return insumo.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    // Endpoint para crear un nuevo insumo
    @PostMapping
    public ResponseEntity<String> registrarInsumo(@RequestBody Insumos insumo) {
        try {
            insumoService.registrarInsumo(insumo);
            return new ResponseEntity<>("Insumo registrado con Ã©xito", HttpStatus.CREATED);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>("Error al registrar el insumo: " + e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    // Endpoint para actualizar un insumo existente
    @PutMapping("/{id}")
    public ResponseEntity<Insumos> actualizarInsumo(@PathVariable Integer id, @RequestBody Insumos insumoDetalles) {
        Insumos insumoActualizado = insumoService.actualizarInsumo(id, insumoDetalles);
        if (insumoActualizado != null) {
            return ResponseEntity.ok(insumoActualizado);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // Endpoint para eliminar un insumo por ID
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> eliminarInsumo(@PathVariable Integer id) {
        if (insumoService.eliminarInsumo(id)) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
